scale_size(range = c(1,4)) +
geom_smooth(method = 'lm', formula = y ~ x) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0,max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
# scale_y_continuous(name = 'Goals Scored', limits = c(0,13), breaks = seq(0, 13, 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Fernandes', 'Player_xG'],
xend = cum_data[Player == 'Fernandes', 'Player_xG'],
y = cum_data[Player == 'Fernandes', 'Goals.scored'],
yend = cum_data[Player == 'Fernandes', 'Predicted']))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm', formula = y ~ x) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0,max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
# scale_y_continuous(name = 'Goals Scored', limits = c(0,13), breaks = seq(0, 13, 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Salah', 'Player_xG'],
xend = cum_data[Player == 'Salah', 'Player_xG'],
y = cum_data[Player == 'Salah', 'Goals.scored'],
yend = cum_data[Player == 'Salah', 'Predicted']))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm', formula = y ~ x) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Salah', 'Player_xG'],
xend = cum_data[Player == 'Salah', 'Player_xG'],
y = cum_data[Player == 'Salah', 'Goals.scored'],
yend = cum_data[Player == 'Salah', 'Predicted']))
# Drop NAs
cum_data[!is.na(cum_data$Goals.scored),]
# Drop NAs
cum_data <- cum_data[!is.na(cum_data$Goals.scored),]
cum_data <- cum_data[!is.na(cum_data$Player_xG),]
# In this file we'll create some visualizations that are more easily produced in R than Python
# Loading libraries
library(ggplot2)
library(ggpmisc)
library(formattable)
library(dplyr)
# setting working directory
setwd('C:/Users/nirgo/Documents/GitHub/Fantasy/Data')
# Loading data. SGW - Single Game Week (i.e, not cumulative). CUM - cumulative data until GW 19.
sgw_data <- read.csv('Final Data.csv')
cum_data <- read.csv('./Cumulative Merged Data/CMD_S21_GW_25.csv')
# Changing encoding for R doesn't catch well some of the latin players' names
Encoding(cum_data$Player) <- 'UTF-8'
Encoding(sgw_data$Player) <- 'UTF-8'
# Drop duplicates
sgw_data <- sgw_data %>% distinct()
cum_data <- cum_data %>% distinct()
# Transform Sel. column to numeric
cum_data$Sel. <- unlist(lapply(cum_data$Sel., function(x) sub('%', '', x) %>% as.numeric()))
# Change role factors for legend visualizations
cum_data$Role <- factor(cum_data$Role, levels = c('GKP',
'DEF',
'MID',
'FWD'))
# Drop NAs
cum_data <- cum_data[!is.na(cum_data$Goals.scored),]
cum_data <- cum_data[!is.na(cum_data$Player_xG),]
# Compute xG-Goals model residuals, indicating which players are best in seizing opportunities
xG_reg <- lm(Player_xG ~ Goals.scored, data = cum_data)
cum_data$Seizure <- xG_reg$residuals
cum_data$Predicted <- xG_reg$fitted.values
seizure_df <- cum_data[order(cum_data$Seizure),c('Player', 'Seizure')]
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm', formula = y ~ x) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Salah', 'Player_xG'],
xend = cum_data[Player == 'Salah', 'Player_xG'],
y = cum_data[Player == 'Salah', 'Goals.scored'],
yend = cum_data[Player == 'Salah', 'Predicted']))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm', formula = y ~ x) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'De Bruyne', 'Player_xG'],
xend = cum_data[Player == 'De Bruyne', 'Player_xG'],
y = cum_data[Player == 'De Bruyne', 'Goals.scored'],
yend = cum_data[Player == 'De Bruyne', 'Predicted']))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'De Bruyne', 'Player_xG'],
xend = cum_data[Player == 'De Bruyne', 'Player_xG'],
y = cum_data[Player == 'De Bruyne', 'Goals.scored'],
yend = cum_data[Player == 'De Bruyne', 'Predicted']))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Salah', 'Player_xG'],
xend = cum_data[Player == 'Salah', 'Player_xG'],
y = cum_data[Player == 'Salah', 'Goals.scored'],
yend = cum_data[Player == 'Salah', 'Predicted']))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm', formula = 'y ~ x', se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Salah', 'Player_xG'],
xend = cum_data[Player == 'Salah', 'Player_xG'],
y = cum_data[Player == 'Salah', 'Goals.scored'],
yend = cum_data[Player == 'Salah', 'Predicted']))
predict(xG_reg)
cum_data$Predicted <- predict(xG_reg)
cum_data[Player == 'Salah', 'Predicted']
cum_data[cum_data$Player == 'Salah', 'Predicted']
cum_data[cum_data$Player == 'Salah', 'Goals.scored']
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[cum_data$Player == 'Salah', 'Player_xG'],
xend = cum_data[cum_data$Player == 'Salah', 'Player_xG'],
y = cum_data[cum_data$Player == 'Salah', 'Goals.scored'],
yend = cum_data[cum_data$Player == 'Salah', 'Predicted']))
# In this file we'll create some visualizations that are more easily produced in R than Python
# Loading libraries
library(ggplot2)
library(ggpmisc)
library(formattable)
library(dplyr)
# setting working directory
setwd('C:/Users/nirgo/Documents/GitHub/Fantasy/Data')
# Loading data. SGW - Single Game Week (i.e, not cumulative). CUM - cumulative data until GW 19.
sgw_data <- read.csv('Final Data.csv')
cum_data <- read.csv('./Cumulative Merged Data/CMD_S21_GW_25.csv')
# Changing encoding for R doesn't catch well some of the latin players' names
Encoding(cum_data$Player) <- 'UTF-8'
Encoding(sgw_data$Player) <- 'UTF-8'
# Drop duplicates
sgw_data <- sgw_data %>% distinct()
cum_data <- cum_data %>% distinct()
# Transform Sel. column to numeric
cum_data$Sel. <- unlist(lapply(cum_data$Sel., function(x) sub('%', '', x) %>% as.numeric()))
# Change role factors for legend visualizations
cum_data$Role <- factor(cum_data$Role, levels = c('GKP',
'DEF',
'MID',
'FWD'))
# Drop NAs
cum_data <- cum_data[!is.na(cum_data$Goals.scored),]
cum_data <- cum_data[!is.na(cum_data$Player_xG),]
# Compute xG-Goals model residuals, indicating which players are best in seizing opportunities
xG_reg <- lm(Player_xG ~ Goals.scored, data = cum_data[cum_data$Player_xG >= 0,])
cum_data$Seizure <- xG_reg$residuals
cum_data$Predicted <- predict(xG_reg)
seizure_df <- cum_data[order(cum_data$Seizure),c('Player', 'Seizure')]
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Salah', 'Player_xG'],
xend = cum_data[Player == 'Salah', 'Player_xG'],
y = cum_data[Player == 'Salah', 'Goals.scored'],
yend = cum_data[Player == 'Salah', 'Predicted']))
cum_data[Player == 'Salah', 'Predicted']
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']))
?abline
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
# ?abline()
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
?abline()
?abline
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
abline(reg = xG_reg) +
# geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
abline(reg = xG_reg) +
# geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_abline(reg = xG_reg) +
# geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']))
cum_data[Player == 'Son', 'Predicted']
cum_data[cum_data$Player == 'Son', 'Predicted']
xG_reg$coefficients
xG_reg$coefficients[1]
xG_reg$coefficients[1]*5
xG_reg$coefficients
xG_reg$coefficients[2]
cum_data[cum_data$Player_xG,]
cum_data[,'Player_xG']
apply(cum_data[,'Player_xG'], 1, function(x) print(x))
apply(cum_data[,'Player_xG'], 2, function(x) print(x))
sapply(cum_data[,'Player_xG'], function(x) print(x))
cum_data$Predicted <- sapply(cum_data[,'Player_xG'], function(x) xG_reg$coefficients[1] + xG_reg$coefficients[1]*x)
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']))
cum_data[Player == 'Son', 'Predicted'])
cum_data[cum_data$Player == 'Son', 'Predicted'])
cum_data[cum_data$Player == 'Son', 'Predicted']
xG_reg$coefficients
# Compute xG-Goals model residuals, indicating which players are best in seizing opportunities
xG_reg <- lm(Goals.scored ~ Player_xG, data = cum_data[cum_data$Player_xG >= 0,])
cum_data$Seizure <- xG_reg$residuals
cum_data$Predicted <- predict(xG_reg)
seizure_df <- cum_data[order(cum_data$Seizure),c('Player', 'Seizure')]
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']))
cum_data[cum_data$Seizure == max(cum_data$Seizure), 'Player']
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']),
linetype = 'dashed')
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']),
linetype = 'dashed',
color = 'red')
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']),
linetype = 'dashed',
color = 'red',
size = 2)
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']),
linetype = 'dashed',
color = 'red',
size = 1)
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']),
linetype = 'dashed',
color = 'red')
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']),
linetype = 'dashed',
color = 'red') +
geom_segment(aes(x = cum_data[Player == 'De Bruyne', 'Player_xG'],
xend = cum_data[Player == 'De Bruyne', 'Player_xG'],
y = cum_data[Player == 'De Bruyne', 'Goals.scored'],
yend = cum_data[Player == 'De Bruyne', 'Predicted']),
linetype = 'dashed',
color = 'red')
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']),
linetype = 'dashed',
color = 'red') +
geom_segment(aes(x = cum_data[Player == 'De Bruyne', 'Player_xG'],
xend = cum_data[Player == 'De Bruyne', 'Player_xG'],
y = cum_data[Player == 'De Bruyne', 'Goals.scored'],
yend = cum_data[Player == 'De Bruyne', 'Predicted']),
linetype = 'dashed',
color = 'black')
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == 'Son', 'Player_xG'],
xend = cum_data[Player == 'Son', 'Player_xG'],
y = cum_data[Player == 'Son', 'Goals.scored'],
yend = cum_data[Player == 'Son', 'Predicted']),
linetype = 'dashed',
color = 'red',
size = 1) +
geom_segment(aes(x = cum_data[Player == 'De Bruyne', 'Player_xG'],
xend = cum_data[Player == 'De Bruyne', 'Player_xG'],
y = cum_data[Player == 'De Bruyne', 'Goals.scored'],
yend = cum_data[Player == 'De Bruyne', 'Predicted']),
linetype = 'dashed',
color = 'black',
size = 1)
cum_data[cum_data$Seizure == min(cum_data$Seizure), 'Player']
best_scorer <- cum_data[cum_data$Seizure == max(cum_data$Seizure), 'Player']
worst_scorer <- cum_data[cum_data$Seizure == min(cum_data$Seizure), 'Player']
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == best_scorer, 'Player_xG'],
xend = cum_data[Player == best_scorer, 'Player_xG'],
y = cum_data[Player == best_scorer, 'Goals.scored'],
yend = cum_data[Player == best_scorer, 'Predicted']),
linetype = 'dashed',
color = 'red') +
geom_segment(aes(x = cum_data[Player == worst_scorer, 'Player_xG'],
xend = cum_data[Player == worst_scorer, 'Player_xG'],
y = cum_data[Player == worst_scorer, 'Goals.scored'],
yend = cum_data[Player == worst_scorer, 'Predicted']),
linetype = 'dashed',
color = 'black')
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored, colour=Role)) +
scale_size(range = c(1,4)) +
geom_smooth(data = cum_data, aes(x = Player_xG, y = Goals.scored), method = 'lm', formula = y ~ x, se = F) +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0, max(cum_data$Player_xG) + 1), breaks = seq(0, round(max(cum_data$Player_xG) + 1), 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0, max(cum_data$Goals.scored) + 1), breaks = seq(0, round(max(cum_data$Goals.scored) + 1), 2)) +
guides(size = F) +
geom_segment(aes(x = cum_data[Player == best_scorer, 'Player_xG'],
xend = cum_data[Player == best_scorer, 'Player_xG'],
y = cum_data[Player == best_scorer, 'Goals.scored'],
yend = cum_data[Player == best_scorer, 'Predicted']),
linetype = 'dashed',
color = 'red') +
geom_segment(aes(x = cum_data[Player == worst_scorer, 'Player_xG'],
xend = cum_data[Player == worst_scorer, 'Player_xG'],
y = cum_data[Player == worst_scorer, 'Goals.scored'],
yend = cum_data[Player == worst_scorer, 'Predicted']),
linetype = 'dashed',
color = 'black') +
facet_wrap(~ Role, scales = 'free')
