# Loading libraries
library(ggplot2)
library(ggpmisc)
library(gridExtra)
library(formattable)
library(dplyr)
library(tidyr)
library(sparkline)
# setting working directory
setwd('C:/Users/nirgo/Documents/GitHub/Fantasy')
# Import data
data <- read.csv('Data/Final Data.csv')
# Changing encoding for R doesn't catch well some of the latin players' names
Encoding(data$Player) <- 'UTF-8'
# Drop duplicates
data <- data %>% distinct()
data <- data[!duplicated(data %>% select(Player, Gameweek)),]
# Transform Sel. column to numeric
data$Sel. <- sapply(data$Sel., function(x) sub('%', '', x) %>% as.numeric())
# Change role factors for legend visualizations
data$Role <- factor(data$Role, levels = c('GKP',
'DEF',
'MID',
'FWD'))
##################################        COST-UTILITY ANALYSIS        ##################################
# Transform data to wide format
wide <- data %>%
select(Player,
Role,
Gameweek,
Cost,
Pts.) %>%
pivot_wider(id_cols = c(Player, Role),
names_from = Gameweek,
values_from = c(Pts., Cost))
# Remove rows with more than 50% NA
wide <- wide[which(rowMeans(!is.na(wide)) > 0.5), ]
# Calculate average points per gameweek
wide$pts_mean <- apply(wide[grepl('Pts', names(wide))], 1, function (x) mean(x, na.rm = T))
# Calculate average cost per gameweek
wide$cost_mean <- apply(wide[grepl('Cost', names(wide))], 1, function (x) mean(x, na.rm = T))
# Compute xG-Goals model residuals, indicating which players are best in seizing opportunities
cost_utility_reg <- lm(pts_mean ~ cost_mean, data = wide)
wide$value <- cost_utility_reg$residuals
wide$value <- wide$value %>% round(2)
# Cost vs. Points plot
ggplot(data = wide,
aes(x = cost_mean, y = pts_mean)) +
geom_text(data = wide,
aes(label = Player, size = pts_mean, colour = Role)) +
scale_size(range = c(1, 3.5)) +
geom_smooth(data = wide,
aes(x = cost_mean, y = pts_mean),
method = 'lm',
formula = y ~ x,
se = F,
colour = 'black') +
stat_poly_eq(formula = y ~ x,
parse = T,
size = 5) +
scale_x_continuous(name = 'Cost') +
scale_y_continuous(name = 'Points') +
guides(size = F) +
theme(legend.title.align = 0.5) +
facet_wrap(~ Role, scales = 'free')
View(wide)
head(wide[, c('Player', "value")], 30)
wide[, c('Player', "value")] %>% order(decreasing = T) %>% head(30)
?order
wide[order(value, decreasing = T), c('Player', "value")] %>% head(30)
wide[order('value', decreasing = T), c('Player', "value")] %>% head(30)
View(wide)
wide[order('value', decreasing = T), c('Player', "value")]
wide[order(-value), c('Player', "value")]
wide[order(-value),]
wide[order(-wide$value), c('Player', "value")]
options(max.print = 50)
wide[order(-wide$value), c('Player', "value")] %>% head(30)
options(max.print = 50)
wide[order(-wide$value), c('Player', "value")] %>% head(30) %>% print()
options(max.print = 50)
wide[order(-wide$value), c('Player', "value")] %>% head(30) %>% print()
getOption("max.print" = 50)
getOption(max.print = 50)
wide <- wide[order(-wide$value), ]
View(wide)
