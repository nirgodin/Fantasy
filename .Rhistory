ifelse(pair[1]=="credit_rating","Greece",""))
exclud2 <- ifelse(pair[1]=="debt_gdp","Greece",
ifelse(pair[1]=="credit_rating","Turkey",""))
ggplot(data = data,aes_string(x=pair[1],y=pair[2])) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1),method = 'lm',colour="dark green", se = FALSE) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0),method = 'lm',colour="orange", se = FALSE) +
geom_text(data = data %>% filter(above_avg_death==1 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'dark green') +
geom_text(data = data %>% filter(above_avg_death==0 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'orange') +
geom_text(data = data %>% filter(country_code == "ISR"), aes(label=country_code), colour = 'blue') +
geom_text(data = data %>% filter(country_code == "OECD"), aes(label=country_code), colour = 'red')+
theme(axis.text=element_text(),axis.title=element_text(face="bold"))
# ggsave(filename = paste0(pair[1],"_",pair[2],'.png'),path = path,width=6,height=5,units="in")
}
stat_poly_eq(formula = y ~ x,
aes(label = paste(..rr.label.., sep = "~~~")),
parse = TRUE,
label.x.npc = "right") +
lapply(pairs,plot_corr)
plot_corr <- function(pair){
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 2)))
as.character(as.expression(eq));
}
exclud1 <- ifelse(pair[1]=="debt_gdp","Japan",
ifelse(pair[1]=="credit_rating","Greece",""))
exclud2 <- ifelse(pair[1]=="debt_gdp","Greece",
ifelse(pair[1]=="credit_rating","Turkey",""))
ggplot(data = data,aes_string(x=pair[1],y=pair[2])) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1),method = 'lm',colour="dark green", se = FALSE) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0),method = 'lm',colour="orange", se = FALSE) +
geom_text(data = data %>% filter(above_avg_death==1 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'dark green') +
geom_text(data = data %>% filter(above_avg_death==0 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'orange') +
geom_text(data = data %>% filter(country_code == "ISR"), aes(label=country_code), colour = 'blue') +
geom_text(data = data %>% filter(country_code == "OECD"), aes(label=country_code), colour = 'red')+
theme(axis.text=element_text(),axis.title=element_text(face="bold"))
# ggsave(filename = paste0(pair[1],"_",pair[2],'.png'),path = path,width=6,height=5,units="in")
}
stat_poly_eq(data = tests_positive_data,
formula = ISR_Reg,
aes(label = paste(..rr.label.., sep = "~~~")),
parse = TRUE) +
lapply(pairs,plot_corr)
library(ggplot2)
library(readxl)
library(dplyr)
library(stargazer)
library(ggpmisc)
#############################        DATA IMPORT & TRANSFORMATIONS        #############################
path <- "C://Users//nirgo//Documents//GitHub//Fiscal_Multipliers//פרק ו//תכניות הקורונה הממשלתיות//השוואה בינל//Plots"
# Import data
data <- read_xlsx('C://Users//nirgo//Documents//GitHub//Fiscal_Multipliers//פרק ו//תכניות הקורונה הממשלתיות//השוואה בינל//data_changed.xlsx',
sheet = 'Sheet1')
# Apply log transformations on some of the variables
# data['log_gdp'] <- log(data$gdp)
data['log_pop'] <- log(data$population)
data['log_cases'] <- log(data$cases_cum)
data['log_deaths'] <- log(data$deaths_cum)
data['log_deaths'] <- log(data$deaths_cum)
# data['imf_non_health_accelerated'] <- data['imf_non_healthcare']+data['imf_accelerated']
# Assign NA values to countries with unknown election vote threshold
data[data$vote_thresh < 0, 'vote_thresh'] <- NA
# Create some more variables
data['firms_total'] <- data$firms_budget_excluded + data$firms_budget_included
# Calculate OECD average stats
OECD_mean <- apply(data[,-c(1:3)], 2, function(x) mean(x, na.rm=T))
data <- rbind(data, c('OECD', 'OECD', 'OECD', unname(as.list(OECD_mean))))
# Seperate between Israel and the rest of the countries, for visualization purposes
ISR <- data[data$country_code == 'ISR',]
NON_ISR <- data[data$country_code != c('ISR', 'OECD'),]
OECD <- data[data$country_code == 'OECD',]
# log GDP vs. Cumulative covid-19 tests
pairs <- list(
# c('age_85_plus','imf_healthcare'),
# c('beds','imf_healthcare'),
c('debt_gdp','imf_healthcare'),
c('debt_gdp','imf_nonhealth_accerlerated'),
c('credit_rating','imf_healthcare'),
c('credit_rating','imf_nonhealth_accerlerated'),
c('avg_deficit','imf_healthcare'),
c('avg_deficit','imf_nonhealth_accerlerated'),
c('doctors','imf_healthcare'),
c('health_spending','imf_healthcare')
)
# c('health_spending','imf_healthcare'),
# c('credit_rating','imf_accelerated'),
# c('log_gdp','imf_accelerated'),
# c('pre_interest','imf_budget_included'),
# c('self_employed','imf_budget_included'),
# c('debt_interest_payments','imf_healthcare'),
# c('structural_balance','imf_healthcare'),
# c('gov_spending','imf_non_healthcare_pc'),
# # c('debt_gdp','imf_quasi'),
# c('nurses','imf_healthcare_pc'),
# c('regulation','imf_non_healthcare'),
# c('sector_f','imf_loans_pc'),
# c('sector_q','imf_non_healthcare_pc'),
# c('stability','imf_budget_included')
# c('vote_thresh','imf_budget_included'),
# c('vote_thresh','imf_healthcare')
# )
plot_corr <- function(pair){
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 2)))
as.character(as.expression(eq));
}
formula <- y ~ x
exclud1 <- ifelse(pair[1]=="debt_gdp","Japan",
ifelse(pair[1]=="credit_rating","Greece",""))
exclud2 <- ifelse(pair[1]=="debt_gdp","Greece",
ifelse(pair[1]=="credit_rating","Turkey",""))
ggplot(data = data,aes_string(x=pair[1],y=pair[2])) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, method = 'lm',colour="dark green", se = FALSE) +
stat_poly_eq(data =  data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, colour='dark green', parse = T, label.x.npc = 'right') +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, method = 'lm',colour="orange", se = FALSE) +
stat_poly_eq(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, colour='orange', parse = T, label.x.npc = 'right', label.y.npc = 0.9) +
geom_text(data = data %>% filter(above_avg_death==1 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'dark green', size = 2) +
geom_text(data = data %>% filter(above_avg_death==0 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'orange', size = 2) +
geom_text(data = data %>% filter(country_code == "ISR"), aes(label=country_code), colour = 'blue') +
geom_text(data = data %>% filter(country_code == "OECD"), aes(label=country_code), colour = 'red')+
theme(axis.text=element_text(),axis.title=element_text(face="bold"))
ggsave(filename = paste0(pair[1],"_",pair[2],'.png'),path = path,width=6,height=5,units="in")
}
lapply(pairs,plot_corr)
plot_corr <- function(pair){
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 2)))
as.character(as.expression(eq));
}
formula <- y ~ x
exclud1 <- ifelse(pair[1]=="debt_gdp","Japan",
ifelse(pair[1]=="credit_rating","Greece",""))
exclud2 <- ifelse(pair[1]=="debt_gdp","Greece",
ifelse(pair[1]=="credit_rating","Turkey",""))
ggplot(data = data,aes_string(x=pair[1],y=pair[2])) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, method = 'lm',colour="dark green", se = FALSE) +
stat_poly_eq(data =  data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, colour='dark green', parse = T, label.x.npc = 'right') +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, method = 'lm',colour="orange", se = FALSE) +
stat_poly_eq(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, colour='orange', parse = T, label.x.npc = 'right', label.y.npc = 0.9) +
geom_text(data = data %>% filter(above_avg_death==1 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'dark green', size = 2) +
geom_text(data = data %>% filter(above_avg_death==0 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'orange', size = 2) +
geom_text(data = data %>% filter(country_code == "ISR"), aes(label=country_code), colour = 'blue', size = 2) +
geom_text(data = data %>% filter(country_code == "OECD"), aes(label=country_code), colour = 'red', size = 2) +
theme(axis.text=element_text(),axis.title=element_text(face="bold"))
ggsave(filename = paste0(pair[1],"_",pair[2],'.png'),path = path,width=6,height=5,units="in")
}
lapply(pairs,plot_corr)
plot_corr <- function(pair){
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 2)))
as.character(as.expression(eq));
}
formula <- y ~ x
exclud1 <- ifelse(pair[1]=="debt_gdp","Japan",
ifelse(pair[1]=="credit_rating","Greece",""))
exclud2 <- ifelse(pair[1]=="debt_gdp","Greece",
ifelse(pair[1]=="credit_rating","Turkey",""))
ggplot(data = data,aes_string(x=pair[1],y=pair[2])) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, method = 'lm',colour="dark green", se = FALSE) +
stat_poly_eq(data =  data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, colour='dark green', parse = T, label.x.npc = 'right') +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, method = 'lm',colour="orange", se = FALSE) +
stat_poly_eq(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, colour='orange', parse = T, label.x.npc = 'right', label.y.npc = 0.9) +
geom_text(data = data %>% filter(above_avg_death==1 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'dark green', size = 2) +
geom_text(data = data %>% filter(above_avg_death==0 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'orange', size = 2) +
geom_text(data = data %>% filter(country_code == "ISR"), aes(label=country_code), colour = 'blue', size = 3) +
geom_text(data = data %>% filter(country_code == "OECD"), aes(label=country_code), colour = 'red', size = 3) +
theme(axis.text=element_text(),axis.title=element_text(face="bold"))
ggsave(filename = paste0(pair[1],"_",pair[2],'.png'),path = path,width=6,height=5,units="in")
}
lapply(pairs,plot_corr)
plot_corr <- function(pair){
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 2)))
as.character(as.expression(eq));
}
formula <- y ~ x
exclud1 <- ifelse(pair[1]=="debt_gdp","Japan",
ifelse(pair[1]=="credit_rating","Greece",""))
exclud2 <- ifelse(pair[1]=="debt_gdp","Greece",
ifelse(pair[1]=="credit_rating","Turkey",""))
ggplot(data = data,aes_string(x=pair[1],y=pair[2])) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, method = 'lm',colour="dark green", se = FALSE) +
stat_poly_eq(data =  data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, rr.digits = 2, colour='dark green', parse = T, label.x.npc = 'right') +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, method = 'lm',colour="orange", se = FALSE) +
stat_poly_eq(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, rr.digits = 2, colour='orange', parse = T, label.x.npc = 'right', label.y.npc = 0.9) +
geom_text(data = data %>% filter(above_avg_death==1 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'dark green', size = 2) +
geom_text(data = data %>% filter(above_avg_death==0 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'orange', size = 2) +
geom_text(data = data %>% filter(country_code == "ISR"), aes(label=country_code), colour = 'blue', size = 3) +
geom_text(data = data %>% filter(country_code == "OECD"), aes(label=country_code), colour = 'red', size = 3) +
theme(axis.text=element_text(),axis.title=element_text(face="bold"))
ggsave(filename = paste0(pair[1],"_",pair[2],'.png'),path = path,width=6,height=5,units="in")
}
lapply(pairs,plot_corr)
plot_corr <- function(pair){
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 2)))
as.character(as.expression(eq));
}
formula <- y ~ x
exclud1 <- ifelse(pair[1]=="debt_gdp","Japan",
ifelse(pair[1]=="credit_rating","Greece",""))
exclud2 <- ifelse(pair[1]=="debt_gdp","Greece",
ifelse(pair[1]=="credit_rating","Turkey",""))
ggplot(data = data,aes_string(x=pair[1],y=pair[2])) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, method = 'lm',colour="dark green", se = FALSE) +
stat_poly_eq(data =  data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, colour='dark green', parse = T, label.x.npc = 'right') +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, method = 'lm',colour="orange", se = FALSE) +
stat_poly_eq(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, colour='orange', parse = T, label.x.npc = 'right', label.y.npc = 0.9) +
geom_text(data = data %>% filter(above_avg_death==1 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'dark green', size = 2) +
geom_text(data = data %>% filter(above_avg_death==0 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'orange', size = 2) +
geom_text(data = data %>% filter(country_code == "ISR"), aes(label=country_code), colour = 'blue', size = 3) +
geom_text(data = data %>% filter(country_code == "OECD"), aes(label=country_code), colour = 'red', size = 3) +
theme(axis.text=element_text(),axis.title=element_text(face="bold"))
ggsave(filename = paste0(pair[1],"_",pair[2],'.png'),path = path,width=6,height=5,units="in")
}
lapply(pairs,plot_corr)
plot_corr <- function(pair){
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 2)))
as.character(as.expression(eq));
}
formula <- y ~ x
exclud1 <- ifelse(pair[1]=="debt_gdp","Japan",
ifelse(pair[1]=="credit_rating","Greece",""))
exclud2 <- ifelse(pair[1]=="debt_gdp","Greece",
ifelse(pair[1]=="credit_rating","Turkey",""))
ggplot(data = data,aes_string(x=pair[1],y=pair[2])) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, method = 'lm',colour="dark green", se = FALSE) +
stat_poly_eq(data =  data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, colour='dark green', parse = T, label.x.npc = 'right') +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, method = 'lm',colour="orange", se = FALSE) +
stat_poly_eq(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, colour='orange', parse = T, label.x.npc = 'right', label.y.npc = 0.9) +
geom_text(data = data %>% filter(above_avg_death==1 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'dark green', size = 5) +
geom_text(data = data %>% filter(above_avg_death==0 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'orange', size = 5) +
geom_text(data = data %>% filter(country_code == "ISR"), aes(label=country_code), colour = 'blue', size = 6) +
geom_text(data = data %>% filter(country_code == "OECD"), aes(label=country_code), colour = 'red', size = 6) +
theme(axis.text=element_text(),axis.title=element_text(face="bold"))
ggsave(filename = paste0(pair[1],"_",pair[2],'.png'),path = path,width=6,height=5,units="in")
}
lapply(pairs,plot_corr)
plot_corr <- function(pair){
lm_eqn <- function(df){
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 2)))
as.character(as.expression(eq));
}
formula <- y ~ x
exclud1 <- ifelse(pair[1]=="debt_gdp","Japan",
ifelse(pair[1]=="credit_rating","Greece",""))
exclud2 <- ifelse(pair[1]=="debt_gdp","Greece",
ifelse(pair[1]=="credit_rating","Turkey",""))
ggplot(data = data,aes_string(x=pair[1],y=pair[2])) +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, method = 'lm',colour="dark green", se = FALSE) +
stat_poly_eq(data =  data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==1), formula = formula, colour='dark green', parse = T, label.x.npc = 'right') +
geom_smooth(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, method = 'lm',colour="orange", se = FALSE) +
stat_poly_eq(data = data%>%filter(!country_name %in% c(exclud1,exclud2) & above_avg_death==0), formula = formula, colour='orange', parse = T, label.x.npc = 'right', label.y.npc = 0.9) +
geom_text(data = data %>% filter(above_avg_death==1 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'dark green', size = 4) +
geom_text(data = data %>% filter(above_avg_death==0 & !country_code %in% c("ISR","OECD")), aes(label=country_code), colour = 'orange', size = 4) +
geom_text(data = data %>% filter(country_code == "ISR"), aes(label=country_code), colour = 'blue', size = 5) +
geom_text(data = data %>% filter(country_code == "OECD"), aes(label=country_code), colour = 'red', size = 5) +
theme(axis.text=element_text(),axis.title=element_text(face="bold"))
ggsave(filename = paste0(pair[1],"_",pair[2],'.png'),path = path,width=6,height=5,units="in")
}
lapply(pairs,plot_corr)
library(ggplot2)
library(ggpmisc)
setwd('C:/Users/nirgo/Documents/GitHub/Fantasy')
sgw_data <- read.csv('Final Data.csv')
cum_data <- read.csv('./Cumulative Merged Data/CMD_S21_GW_19a.csv')
Encoding(cum_data$Player) <- 'UTF-8'
ggplot(data = sgw_data, aes(x = Player_xG, y = Goals.scored, color = Cost)) +
geom_point() +
scale_color_gradient(low = 'orange', high = 'red') +
stat_poly_eq(formula = y ~ x, parse = T)
ggplot(data = sgw_data, aes(x = Player_xG, y = Goals.scored)) +
geom_point() +
stat_poly_eq(formula = y ~ x, parse = T)
ggplot(data = sgw_data, aes(x = Player_xG, y = Goals.scored)) +
geom_point() +
geom_smooth(method = 'lm')
stat_poly_eq(formula = y ~ x, parse = T)
sgw_data <- sgw_data[sgw_data$Player_xG >= 0,]
ggplot(data = sgw_data, aes(x = Player_xG, y = Goals.scored)) +
geom_point() +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T) +
scale_x_continuous(name = 'xG', limits = c(0,3), breaks = seq(0, 3, 1)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,4), breaks = seq(0, 3, 1))
ggplot(data = sgw_data, aes(x = Player_xG, y = Goals.scored)) +
geom_point() +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T) +
scale_x_continuous(name = 'xG', limits = c(0,2.5), breaks = seq(0, 3, 1)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,4), breaks = seq(0, 3, 1))
ggplot(data = sgw_data, aes(x = Player_xG, y = Goals.scored)) +
geom_point() +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0,2.5), breaks = seq(0, 3, 1)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,4), breaks = seq(0, 3, 1))
# Export plot
ggsave(filename = 'xG_Goals_SGW.png',
path = './Visualizations',
width = 8,
height = 4.46666)
ggplot(data = sgw_data, aes(x = Player_xG, y = Goals.scored)) +
geom_point() +
geom_smooth() +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0,2.5), breaks = seq(0, 3, 1)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,4), breaks = seq(0, 3, 1))
# Cumulative - Cost vs. Points
ggplot(data = cum_data, aes(x = Cost, y = Pts.)) +
geom_text(data = cum_data, aes(label = Player, size = Pts.)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'xG', limits = c(0,12.5), breaks = seq(0, 13, 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,13), breaks = seq(0, 13, 2))
# Cumulative - Cost vs. Points
ggplot(data = cum_data, aes(x = Cost, y = Pts.)) +
geom_text(data = cum_data, aes(label = Player, size = Pts.)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'xG', limits = c(4,12.5), breaks = seq(4, 13, 2)) # +
# scale_y_continuous(name = 'Goals Scored', limits = c(0,13), breaks = seq(0, 13, 2))
# Cumulative - Cost vs. Points
ggplot(data = cum_data, aes(x = Cost, y = Pts.)) +
geom_text(data = cum_data[cum_data$Pts. > 25,], aes(label = Player, size = Pts.)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'Cost', limits = c(4,12.5), breaks = seq(4, 13, 2)) +
scale_y_continuous(limits = c(20,150), breaks = seq(20, 150, 20))
# Cumulative - Cost vs. Points
ggplot(data = cum_data, aes(x = Cost, y = Pts.)) +
geom_text(data = cum_data[cum_data$Pts. > 25,], aes(label = Player, size = Cost)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'Cost', limits = c(4,12.5), breaks = seq(4, 13, 2)) +
scale_y_continuous(limits = c(20,150), breaks = seq(20, 150, 20))
# Cumulative - Cost vs. Points
ggplot(data = cum_data, aes(x = Cost, y = Pts.)) +
geom_text(data = cum_data[cum_data$Pts. > 25,], aes(label = Player, size = Cost)) +
scale_size(range = c(1,4)) +
geom_smooth() +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'Cost', limits = c(4,12.5), breaks = seq(4, 13, 2)) +
scale_y_continuous(limits = c(20,150), breaks = seq(20, 150, 20))
# Cumulative - Cost vs. Points
ggplot(data = cum_data, aes(x = Cost, y = Pts.)) +
geom_text(data = cum_data[cum_data$Pts. > 25,], aes(label = Player, size = Cost)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'Cost', limits = c(4,12.5), breaks = seq(4, 13, 2)) +
scale_y_continuous(limits = c(20,150), breaks = seq(20, 150, 20))
# Cumulative - Cost vs. Points
ggplot(data = cum_data, aes(x = Cost, y = Pts.)) +
geom_text(data = cum_data[cum_data$Pts. > 25,], aes(label = Player, size = Cost)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'Cost', limits = c(4,12.5), breaks = seq(4, 13, 2)) +
scale_y_continuous(limits = c(20,150), breaks = seq(20, 150, 20))
ggsave(filename = 'Cost_Pts.png',
path = './Visualizations',
width = 8,
height = 4.46666)
# Loading data. SGW - Single Game Week (i.e, not cumulative). CUM - cumulative data until GW 19.
sgw_data <- read.csv('Final Data.csv')
ggplot(data = sgw_data[sgw_data$Player_xG >= 0,], aes(x = Player_xG, y = Goals.scored)) +
geom_point() +
geom_smooth() +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0,2.5), breaks = seq(0, 3, 1)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,4), breaks = seq(0, 3, 1))
# In this file we'll create some visualizations that are more easily produced in R than Python
# Loading libraries
library(ggplot2)
library(ggpmisc)
# setting working directory
setwd('C:/Users/nirgo/Documents/GitHub/Fantasy')
# Loading data. SGW - Single Game Week (i.e, not cumulative). CUM - cumulative data until GW 19.
sgw_data <- read.csv('Final Data.csv')
cum_data <- read.csv('./Cumulative Merged Data/CMD_S21_GW_19.csv')
# Changing encoding for R doesn't catch well some of the latin players' names
Encoding(cum_data$Player) <- 'UTF-8'
# Single GW - xG vs. Goals scored
ggplot(data = sgw_data[sgw_data$Player_xG >= 0,], aes(x = Player_xG, y = Goals.scored)) +
geom_point() +
geom_smooth() +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
scale_x_continuous(name = 'xG', limits = c(0,2.5), breaks = seq(0, 3, 1)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,4), breaks = seq(0, 3, 1))
# Export plot
ggsave(filename = 'xG_Goals_SGW.png',
path = './Visualizations',
width = 8,
height = 4.46666)
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'xG', limits = c(0,12.5), breaks = seq(0, 13, 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,13), breaks = seq(0, 13, 2))
# Export plot
ggsave(filename = 'xG_Goals.png',
path = './Visualizations',
width = 8,
height = 4.46666)
# Cumulative - xA vs. Assists
ggplot(data = cum_data, aes(x = Player_xA, y = Assists)) +
geom_text(data = cum_data, aes(label = Player, size = Assists)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'xA', limits = c(0,8), breaks = seq(0, 8, 2)) +
scale_y_continuous(name = 'Assists', limits = c(0,11), breaks = seq(0, 11, 2))
# Export plot
ggsave(filename = 'xA_Assists.png',
path = './Visualizations',
width = 8,
height = 4.46666)
# Cumulative - Cost vs. Points
ggplot(data = cum_data, aes(x = Cost, y = Pts.)) +
geom_text(data = cum_data[cum_data$Pts. > 25,], aes(label = Player, size = Cost)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'Cost', limits = c(4,12.5), breaks = seq(4, 13, 2)) +
scale_y_continuous(limits = c(20,150), breaks = seq(20, 150, 20))
# Export plot
ggsave(filename = 'Cost_Pts.png',
path = './Visualizations',
width = 8,
height = 4.46666)
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'xG', limits = c(0,12.5), breaks = seq(0, 13, 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,13), breaks = seq(0, 13, 2))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'xG', limits = c(0,12), breaks = seq(0, 12, 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,13), breaks = seq(0, 13, 2))
# Cumulative - xG vs. Goals scored
ggplot(data = cum_data, aes(x = Player_xG, y = Goals.scored)) +
geom_text(data = cum_data, aes(label = Player, size = Goals.scored)) +
scale_size(range = c(1,4)) +
geom_smooth(method = 'lm') +
stat_poly_eq(formula = y ~ x, parse = T, size = 5) +
theme(legend.position = 'none') +
scale_x_continuous(name = 'xG', limits = c(0,12), breaks = seq(0, 12, 2)) +
scale_y_continuous(name = 'Goals Scored', limits = c(0,13), breaks = seq(0, 13, 2))
# Export plot
ggsave(filename = 'xG_Goals.png',
path = './Visualizations',
width = 8,
height = 4.46666)
